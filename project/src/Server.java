/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_server_project;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author asmaa
 */
public class Server extends javax.swing.JFrame {

    private ServerSocket serverSocket;
    private Socket socket;
    private DataInputStream input;
    private DataOutputStream output;

    public Server() {

        try {
            initComponents();
            setVisible(true);
            setSize(420, 550);
            serverSocket = new ServerSocket(1234);
            socket = serverSocket.accept();
            input = new DataInputStream(socket.getInputStream());
            output = new DataOutputStream(socket.getOutputStream());

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Host not Available",
                    "Error Exception", JOptionPane.ERROR_MESSAGE);
        }
        do {

        try {
            String in, out;
            in = input.readUTF();
            File myObj = new File("accounts.txt");
            Scanner myReader = new Scanner(myObj);
            out = "false";
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                if (in.equals(data)) {
                    out = "true";
                    break;
                }
            }
            output.writeUTF(out);
            output.flush();
            myReader.close();
        } catch (Exception e) {
           
        }
        } while (true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showInfo = new javax.swing.JToggleButton();
        show_txt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showInfo.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        showInfo.setText("Show");
        showInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(showInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(show_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(showInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(show_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInfoActionPerformed

        try {
            FileReader reader = new FileReader("information.txt");
            Scanner myReader = new Scanner(reader);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                show_txt.setText(data);
                System.out.println(data);
            }
            myReader.close();
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred.",
                "Error Exception", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_showInfoActionPerformed

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton showInfo;
    private javax.swing.JTextField show_txt;
    // End of variables declaration//GEN-END:variables


}
